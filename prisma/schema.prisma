generator client {
  provider = "prisma-client-js"
}

generator prismaClassGenerator {
  provider               = "prisma-class-generator"
  output                 = "../src/dtos"
  dryRun                 = "false"
  separateRelationFields = "false"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model customer {
  id         Int       @id @default(autoincrement()) @db.UnsignedInt
  name       String    @db.VarChar(255)
  gender     Int
  age        Float
  id_card    String    @db.VarChar(255)
  email      String?   @db.VarChar(255)
  address    String    @db.VarChar(255)
  status     Int?      @default(1)
  avatar     String?   @db.VarChar(255)
  created_at DateTime? @db.DateTime(0)
  updated_at DateTime? @db.DateTime(0)
}

model permissions {
  permission_id    Int                @id @default(autoincrement())
  permission_name  String             @unique(map: "permission_name") @db.VarChar(50)
  description      String?            @db.VarChar(255)
  created_at       DateTime?          @default(now()) @db.Timestamp(0)
  updated_at       DateTime?          @default(now()) @db.Timestamp(0)
  permission_code  String             @db.VarChar(255)
  role_permissions role_permissions[]
  user_permissions user_permissions[]
}

model role_permissions {
  role_permission_id Int         @id @default(autoincrement())
  role_id            Int
  permission_id      Int
  created_at         DateTime?   @default(now()) @db.Timestamp(0)
  updated_at         DateTime?   @default(now()) @db.Timestamp(0)
  roles              roles       @relation(fields: [role_id], references: [role_id], onDelete: NoAction, onUpdate: NoAction, map: "role_permissions_ibfk_1")
  permissions        permissions @relation(fields: [permission_id], references: [permission_id], onDelete: NoAction, onUpdate: NoAction, map: "role_permissions_ibfk_2")

  @@unique([role_id, permission_id], map: "role_id")
  @@index([permission_id], map: "permission_id")
}

model roles {
  role_id          Int                @id @default(autoincrement())
  role_name        String             @unique(map: "role_name") @db.VarChar(50)
  description      String?            @db.VarChar(255)
  created_at       DateTime?          @default(now()) @db.Timestamp(0)
  updated_at       DateTime?          @default(now()) @db.Timestamp(0)
  role_permissions role_permissions[]
  user_roles       user_roles[]
}

model user_permissions {
  user_permission_id Int         @id @default(autoincrement())
  user_id            Int
  permission_id      Int
  created_at         DateTime?   @default(now()) @db.Timestamp(0)
  updated_at         DateTime?   @default(now()) @db.Timestamp(0)
  users              users       @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "user_permissions_ibfk_1")
  permissions        permissions @relation(fields: [permission_id], references: [permission_id], onDelete: NoAction, onUpdate: NoAction, map: "user_permissions_ibfk_2")

  @@unique([user_id, permission_id], map: "user_id")
  @@index([permission_id], map: "permission_id")
}

model user_roles {
  user_role_id Int       @id @default(autoincrement())
  user_id      Int
  role_id      Int
  created_at   DateTime? @default(now()) @db.Timestamp(0)
  updated_at   DateTime? @default(now()) @db.Timestamp(0)
  users        users     @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "user_roles_ibfk_1")
  roles        roles     @relation(fields: [role_id], references: [role_id], onDelete: NoAction, onUpdate: NoAction, map: "user_roles_ibfk_2")

  @@unique([user_id, role_id], map: "user_id")
  @@index([role_id], map: "role_id")
}

model users {
  user_id          Int                @id @default(autoincrement())
  username         String             @unique(map: "username") @db.VarChar(50)
  password         String             @db.VarChar(30)
  email            String?            @unique(map: "email") @db.VarChar(100)
  created_at       DateTime?          @default(now()) @db.Timestamp(0)
  updated_at       DateTime?          @default(now()) @db.Timestamp(0)
  nickname         String?            @db.VarChar(50)
  user_permissions user_permissions[]
  user_roles       user_roles[]
}
